// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// DireDi Generator
// **************************************************************************

// GENERATED CODE - DO NOT MODIFY BY HAND
// Generated by dire_di code generator
// Entry point: lib/app_module.dart
// Components found: 10

import 'package:dire_di_flutter/dire_di.dart';

import 'bloc/user_bloc.dart';
import 'datasources/user_datasources.dart';
import 'repositories/user_repository.dart';
import 'repositories/user_repository_impl.dart';
import 'services/database_service.dart';
import 'services/user_service.dart';
import 'usecases/user_usecases.dart';

extension GeneratedDependencies on DireContainer {
  /// Register all discovered components from the entire project
  void registerGeneratedDependencies() {
    // Register UserApiDataSource
    register<UserApiDataSource>(
      () => UserApiDataSource(),
      scope: ScopeType.singleton,
    );

    // Register UserLocalDataSource
    register<UserLocalDataSource>(
      () => UserLocalDataSource(),
      scope: ScopeType.singleton,
    );

    // Register UserRepositoryImpl
    register<UserRepository>(
      () {
        final instance = UserRepositoryImpl();
        instance.databaseService = get<DatabaseService>();
        instance.configService = get<ConfigurationService>();
        instance.apiDataSource = get<UserApiDataSource>();
        instance.localDataSource = get<UserLocalDataSource>();
        return instance;
      },
      scope: ScopeType.singleton,
    );

    // Register GetAllUsersUseCase
    register<GetAllUsersUseCase>(
      () {
        final instance = GetAllUsersUseCase();
        instance.userRepository = get<UserRepository>();
        return instance;
      },
      scope: ScopeType.singleton,
    );

    // Register CreateUserUseCase
    register<CreateUserUseCase>(
      () {
        final instance = CreateUserUseCase();
        instance.userRepository = get<UserRepository>();
        return instance;
      },
      scope: ScopeType.singleton,
    );

    // Register DeleteUserUseCase
    register<DeleteUserUseCase>(
      () {
        final instance = DeleteUserUseCase();
        instance.userRepository = get<UserRepository>();
        return instance;
      },
      scope: ScopeType.singleton,
    );

    // Register DatabaseService
    register<DatabaseService>(
      () => DatabaseService(),
      scope: ScopeType.singleton,
    );

    // Register ConfigurationService
    register<ConfigurationService>(
      () => ConfigurationService(),
      scope: ScopeType.singleton,
    );

    // Register UserService
    register<UserService>(
      () {
        final instance = UserService(get<ConfigurationService>());
        instance.userRepository = get<UserRepository>();
        return instance;
      },
      scope: ScopeType.singleton,
    );

    // Register UserBloc
    register<UserBloc>(
      () {
        final instance = UserBloc();
        instance.userRepository = get<UserRepository>();
        return instance;
      },
      scope: ScopeType.singleton,
    );

  }
}

/// Convenience mixin that provides direct property access to DI components.
/// Add this mixin to your StatefulWidget states for easy dependency access.
///
/// Example:
/// ```dart
/// class _MyWidgetState extends State<MyWidget> with DiCore, DiMixin {
///   @override
///   Widget build(BuildContext context) {
///     return Text(userService.getCurrentUser()); // Direct access!
///   }
/// }
/// ```
mixin DiMixin {

  /// Get UserApiDataSource instance from DI container
  UserApiDataSource get userApiDataSource {
    if (this is DiCore) {
      return (this as DiCore).get<UserApiDataSource>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get UserApiDataSource instance from DI container (async)
  Future<UserApiDataSource> get userApiDataSourceAsync async {
    if (this is DiCore) {
      return (this as DiCore).getAsync<UserApiDataSource>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get UserLocalDataSource instance from DI container
  UserLocalDataSource get userLocalDataSource {
    if (this is DiCore) {
      return (this as DiCore).get<UserLocalDataSource>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get UserLocalDataSource instance from DI container (async)
  Future<UserLocalDataSource> get userLocalDataSourceAsync async {
    if (this is DiCore) {
      return (this as DiCore).getAsync<UserLocalDataSource>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get UserRepository instance from DI container
  UserRepository get userRepository {
    if (this is DiCore) {
      return (this as DiCore).get<UserRepository>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get UserRepository instance from DI container (async)
  Future<UserRepository> get userRepositoryAsync async {
    if (this is DiCore) {
      return (this as DiCore).getAsync<UserRepository>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get GetAllUsersUseCase instance from DI container
  GetAllUsersUseCase get getAllUsersUseCase {
    if (this is DiCore) {
      return (this as DiCore).get<GetAllUsersUseCase>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get GetAllUsersUseCase instance from DI container (async)
  Future<GetAllUsersUseCase> get getAllUsersUseCaseAsync async {
    if (this is DiCore) {
      return (this as DiCore).getAsync<GetAllUsersUseCase>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get CreateUserUseCase instance from DI container
  CreateUserUseCase get createUserUseCase {
    if (this is DiCore) {
      return (this as DiCore).get<CreateUserUseCase>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get CreateUserUseCase instance from DI container (async)
  Future<CreateUserUseCase> get createUserUseCaseAsync async {
    if (this is DiCore) {
      return (this as DiCore).getAsync<CreateUserUseCase>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get DeleteUserUseCase instance from DI container
  DeleteUserUseCase get deleteUserUseCase {
    if (this is DiCore) {
      return (this as DiCore).get<DeleteUserUseCase>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get DeleteUserUseCase instance from DI container (async)
  Future<DeleteUserUseCase> get deleteUserUseCaseAsync async {
    if (this is DiCore) {
      return (this as DiCore).getAsync<DeleteUserUseCase>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get DatabaseService instance from DI container
  DatabaseService get databaseService {
    if (this is DiCore) {
      return (this as DiCore).get<DatabaseService>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get DatabaseService instance from DI container (async)
  Future<DatabaseService> get databaseServiceAsync async {
    if (this is DiCore) {
      return (this as DiCore).getAsync<DatabaseService>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get ConfigurationService instance from DI container
  ConfigurationService get configurationService {
    if (this is DiCore) {
      return (this as DiCore).get<ConfigurationService>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get ConfigurationService instance from DI container (async)
  Future<ConfigurationService> get configurationServiceAsync async {
    if (this is DiCore) {
      return (this as DiCore).getAsync<ConfigurationService>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get UserService instance from DI container
  UserService get userService {
    if (this is DiCore) {
      return (this as DiCore).get<UserService>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get UserService instance from DI container (async)
  Future<UserService> get userServiceAsync async {
    if (this is DiCore) {
      return (this as DiCore).getAsync<UserService>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get UserBloc instance from DI container
  UserBloc get userBloc {
    if (this is DiCore) {
      return (this as DiCore).get<UserBloc>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

  /// Get UserBloc instance from DI container (async)
  Future<UserBloc> get userBlocAsync async {
    if (this is DiCore) {
      return (this as DiCore).getAsync<UserBloc>();
    }
    throw StateError(
      'DiMixin must be used with DiCore. '
      'Add "with DiCore, DiMixin" to your class.',
    );
  }

}
